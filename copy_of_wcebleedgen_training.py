# -*- coding: utf-8 -*-
"""Copy of WCEBleedGen Training

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1B2mMhSd1Dc2RJxOLaHjHyQZj8eOiUJCe

1. Install Dependencies and Setup
"""

!pip install tensorflow tensorflow-gpu opencv-python matplotlib

!pip list

import tensorflow as tf
  import os

gpus = tf.config.experimental.list_physical_devices('CPU')

gpus

# Avoid OOM errors by setting GPU Memory Consumption Growth
gpus = tf.config.experimental.list_physical_devices('GPU')
for gpu in gpus:
    tf.config.experimental.set_memory_growth(gpu, True)

"""2. Load Dataset"""

import numpy as np
from matplotlib import pyplot as plt

from google.colab import drive
drive.mount('/content/drive')

!unzip drive/My\ Drive/WCEBleedGen.zip

data = tf.keras.utils.image_dataset_from_directory('WCEBleedGen')

# we cannot fetch data directly so we are using numpy iterator
data_iterator = data.as_numpy_iterator()

data_iterator

batch = data_iterator.next()

len(batch) # batch contians image and its label

# Image represented as numpy array
batch[0].shape

# 0 -> bleed
# 1 -> non bleed

batch[1]

class_labels = ["GI Bleeding", "No GI Bleeding"]
'''
0 => GI Bleeding
1 => No GI Bleeding '''

# in above we cannot detect which one (bleed or not bleed ) is represented by 0 or 1 so we are plotting to check that

fig , ax = plt.subplots(ncols=4, figsize=(20 ,20))
for idx , img in enumerate(batch[0][:4]):
  ax[idx].imshow(img.astype(int))
  ax[idx].title.set_text(batch[1][idx])

"""3. Preprocessing"""

# SCALE Data

# x -> image & y -> label
#  We are changing the rgb scale (that vary from 0 to 255) so that it is min which is the best to optimize
data = data.map(lambda x , y : (x / 255 , y))

scaled_iterator = data.as_numpy_iterator()

batch = scaled_iterator.next()

fig , ax = plt.subplots(ncols=4, figsize=(20 ,20))
for idx , img in enumerate(batch[0][:4]):
  ax[idx].imshow(img)
  ax[idx].title.set_text(batch[1][idx])

len(data)

#SPLIT DATA

train_size = int(len(data)*.7)
val_size = int(len(data) * .1)
test_size = int(len(data)*.2)+1

train_size

test_size

val_size

train = data.take(train_size)
val = data.skip(train_size).take(val_size)
test = data.skip(train_size + val_size).take(test_size)

"""4. Deep Learning Model"""

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Dense, Flatten
from tensorflow.keras.optimizers import Adam
from tensorflow.keras.utils import to_categorical
import cv2

import tensorflow_probability as tfp

model = Sequential()

model.add(Conv2D(16, (3,3), 1, activation='relu', input_shape=(256,256,3)))
model.add(MaxPooling2D())
model.add(Conv2D(32, (3,3), 1, activation='relu'))
model.add(MaxPooling2D())
model.add(Conv2D(16, (3,3), 1, activation='relu'))
model.add(MaxPooling2D())
model.add(Flatten())
model.add(Dense(256, activation='relu'))
model.add(Dense(1, activation='sigmoid'))
model.compile('adam', loss=tf.losses.BinaryCrossentropy(), metrics=['accuracy'])

model.compile(optimizer=Adam(), loss='categorical_crossentropy', metrics=['accuracy'])

model.summary()

"""Train

"""

from sklearn.utils.class_weight import compute_class_weight
import numpy as np

logdir='logs'

tensorboard_callback = tf.keras.callbacks.TensorBoard(log_dir=logdir)

from collections import Counter

# Extract labels from the train dataset
train_labels = np.concatenate([y for x, y in train], axis=0)

# Calculate class frequencies
class_counts = Counter(train_labels)

# Calculate total number of samples
total_samples = len(train_labels)

# Calculate class weights
class_weights = {class_idx: total_samples / (num_samples * len(class_counts)) for class_idx, num_samples in class_counts.items()}

hist = model.fit(train, epochs=15, validation_data=val, class_weight=class_weights, callbacks=[tensorboard_callback])

fig = plt.figure()
plt.plot(hist.history['loss'], color='teal', label='loss')
plt.plot(hist.history['val_loss'], color='orange', label='val_loss')
fig.suptitle('Loss', fontsize=20)
plt.legend(loc="upper left")
plt.show()

fig = plt.figure()
plt.plot(hist.history['accuracy'], color='teal', label='accuracy')
plt.plot(hist.history['val_accuracy'], color='orange', label='val_accuracy')
fig.suptitle('Accuracy', fontsize=20)
plt.legend(loc="upper left")
plt.show()

"""Save The Model"""

from tensorflow.keras.models import load_model

model.save(os.path.join('models','imageclassifier.h5'))